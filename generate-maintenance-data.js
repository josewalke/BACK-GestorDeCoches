require('dotenv').config();
const { query } = require('./database-pg');

// Tipos de mantenimiento realistas
const tiposMantenimiento = [
  'Revisi√≥n General',
  'Cambio de Aceite',
  'Frenos',
  'Suspensi√≥n',
  'Motor',
  'Transmisi√≥n',
  'Aire Acondicionado',
  'Electricidad',
  'Pintura y Carrocer√≠a',
  'Neum√°ticos',
  'Sistema de Escape',
  'Direcci√≥n',
  'Climatizaci√≥n',
  'Sistema de Combustible',
  'Diagn√≥stico Electr√≥nico'
];

// Descripciones de problemas comunes
const problemasComunes = [
  'Ruido anormal en el motor',
  'Frenos desgastados',
  'Fuga de aceite',
  'Problemas de climatizaci√≥n',
  'Luz de check engine encendida',
  'Vibraciones en la direcci√≥n',
  'Problemas de transmisi√≥n',
  'Suspensi√≥n da√±ada',
  'Sistema el√©ctrico defectuoso',
  'Problemas de refrigeraci√≥n',
  'Escape roto',
  'Neum√°ticos desgastados',
  'Problemas de arranque',
  'Fuga de refrigerante',
  'Sistema de frenos defectuoso'
];

// Generar fecha de inicio de mantenimiento
function generarFechaInicio() {
  const fechaActual = new Date();
  const diasAtras = Math.floor(Math.random() * 14) + 1; // 1-14 d√≠as atr√°s
  const fechaInicio = new Date(fechaActual.getTime() - (diasAtras * 24 * 60 * 60 * 1000));
  return fechaInicio.toISOString().split('T')[0];
}

// Generar fecha estimada de finalizaci√≥n
function generarFechaFin(fechaInicio) {
  const fechaInicioObj = new Date(fechaInicio);
  const diasDuracion = Math.floor(Math.random() * 7) + 2; // 2-8 d√≠as de duraci√≥n
  const fechaFin = new Date(fechaInicioObj.getTime() + (diasDuracion * 24 * 60 * 60 * 1000));
  return fechaFin.toISOString().split('T')[0];
}

// Generar costo de mantenimiento
function generarCosto() {
  const costoBase = Math.floor(Math.random() * 800) + 200; // 200-1000‚Ç¨
  const igic = costoBase * 0.07; // 7% IGIC
  return {
    costo_base: costoBase,
    igic: igic,
    costo_total: costoBase + igic
  };
}

// Generar mantenimiento individual
function generarMantenimiento(vehiculoId, kmActuales) {
  const tipo = tiposMantenimiento[Math.floor(Math.random() * tiposMantenimiento.length)];
  const problema = problemasComunes[Math.floor(Math.random() * problemasComunes.length)];
  const fechaServicio = generarFechaInicio();
  const costos = generarCosto();
  
  return {
    mantenimiento_id: null, // Se auto-incrementar√°
    vehiculo_id: vehiculoId,
    fecha_servicio: fechaServicio,
    km_servicio: kmActuales,
    descripcion: `${tipo}: ${problema}`,
    coste: costos.costo_total,
    proveedor: generarProveedor(),
    created_at: new Date().toISOString()
  };
}

// Generar proveedor
function generarProveedor() {
  const proveedores = [
    'Taller Central Tenerife',
    'AutoServicio Canarias',
    'Mec√°nica Express',
    'Taller Premium',
    'Servicio R√°pido',
    'Mec√°nica Profesional',
    'Taller Especializado',
    'AutoMantenimiento',
    'Servicio T√©cnico Canarias',
    'Taller de Confianza'
  ];
  
  return proveedores[Math.floor(Math.random() * proveedores.length)];
}

async function generarDatosMantenimiento() {
  try {
    console.log('üîß Generando datos de mantenimientos...\n');
    
    // Obtener veh√≠culos en taller con kil√≥metros
    const vehiculosEnTaller = await query(`
      SELECT vehiculo_id, marca, modelo, matricula, km_actuales 
      FROM vehiculos 
      WHERE estado = 'taller' 
      ORDER BY vehiculo_id
    `);
    
    console.log(`üìä Veh√≠culos en taller encontrados: ${vehiculosEnTaller.rows.length}\n`);
    
    if (vehiculosEnTaller.rows.length === 0) {
      console.log('‚ùå No hay veh√≠culos en taller para generar mantenimientos');
      return;
    }
    
    // Limpiar tabla de mantenimientos
    await query('DELETE FROM mantenimientos');
    console.log('üßπ Tabla de mantenimientos limpiada');
    
    // Generar mantenimientos para cada veh√≠culo en taller
    for (const vehiculo of vehiculosEnTaller.rows) {
      const mantenimiento = generarMantenimiento(vehiculo.vehiculo_id, vehiculo.km_actuales);
      
      await query(`
        INSERT INTO mantenimientos (
          vehiculo_id, fecha_servicio, km_servicio, 
          descripcion, coste, proveedor, created_at
        ) VALUES (
          $1, $2, $3, $4, $5, $6, $7
        )
      `, [
        mantenimiento.vehiculo_id,
        mantenimiento.fecha_servicio,
        mantenimiento.km_servicio,
        mantenimiento.descripcion,
        mantenimiento.coste,
        mantenimiento.proveedor,
        mantenimiento.created_at
      ]);
      
      console.log(`‚úÖ Mantenimiento generado para ${vehiculo.marca} ${vehiculo.modelo} (${vehiculo.matricula})`);
      console.log(`   Descripci√≥n: ${mantenimiento.descripcion}`);
      console.log(`   Proveedor: ${mantenimiento.proveedor}`);
      console.log(`   Costo: ‚Ç¨${mantenimiento.coste.toLocaleString()}`);
      console.log('');
    }
    
    // Verificar mantenimientos creados
    const mantenimientosCreados = await query('SELECT COUNT(*) as total FROM mantenimientos');
    console.log(`‚úÖ Total de mantenimientos creados: ${mantenimientosCreados.rows[0].total}`);
    
    // Mostrar resumen
    const resumen = await query(`
      SELECT 
        COUNT(*) as total_mantenimientos,
        AVG(coste) as costo_promedio,
        SUM(coste) as costo_total
      FROM mantenimientos
    `);
    
    const resumenData = resumen.rows[0];
    console.log('\nüìà Resumen de mantenimientos:');
    console.log(`   Total mantenimientos: ${resumenData.total_mantenimientos}`);
    console.log(`   Costo promedio: ‚Ç¨${Math.round(resumenData.costo_promedio).toLocaleString()}`);
    console.log(`   Costo total: ‚Ç¨${Math.round(resumenData.costo_total).toLocaleString()}`);
    
  } catch (error) {
    console.error('‚ùå Error generando datos de mantenimiento:', error.message);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  generarDatosMantenimiento();
}

module.exports = { generarDatosMantenimiento }; 